[{"content":"接触 rust 倒是挺早了，看着它的生态慢慢好起来。\n第一次用上 trait 就在想，这么好的东西，该怎么在 c++ 里用上呢。\n不过不算刚需，就一直搁置着，最近尝试简单实现了一下。\nRust Trait 先来看看 rust trait 的例子。\n简单来说，就是 \u0026ldquo;定义接口，实现接口，接口多态\u0026rdquo;。\n其实 c++ 这边已经有一套完整的继承范式来实现上述需求了，\u0026ldquo;虚接口，继承实现，虚多态\u0026rdquo;。\n不过虚函数会要求强制动态分发，然后给类实例添加虚表指针。\n所以要尝试不用虚继承来实现 trait。\nkeywords trait → Defines a trait. trait Speak { fn speak(\u0026amp;self) -\u0026gt; String; } impl → Implements a trait for a type. struct Dog; impl Speak for Dog { fn speak(\u0026amp;self) -\u0026gt; String { \u0026#34;Woof!\u0026#34;.to_string() } } where → Adds trait bounds in a structured way. fn make_speak\u0026lt;T\u0026gt;(animal: T) where T: Speak { println!(\u0026#34;{}\u0026#34;, animal.speak()); } dyn → Used for dynamic dispatch. fn speak_dyn(animal: \u0026amp;dyn Speak) { println!(\u0026#34;{}\u0026#34;, animal.speak()); } C++ 实现 完整的代码\n具体的实现可能会改变，参考 repo 里的文档\n接口定义 在没有反射的代码生成时，接口需要同时带有 delegate 功能\nrequires 只能用作约束，它无法落地成具体的函数，所以需要定义具体的接口类。\n现在我们可以定义任意接口类，然后写一套函数的声明。\n然后该怎么通过接口去调用实现呢，如果是具体的实例，它应该会拥有具体的实现函数，可以正常调用。但是考虑 dyn 的实现，以及C++没法通过模板去生成变量/函数的名字，我想的是让接口类自己带有 delegate 的实现，根据情况的不同，去调用不同的实现。\ntemplate\u0026lt;typename T\u0026gt; struct Speak { auto speak() -\u0026gt; std::string { return M::template call\u0026lt;0\u0026gt;(this); } private: using M = TraitMeta\u0026lt;Speak, T\u0026gt;; friend M; template\u0026lt;typename F\u0026gt; static consteval auto collect() { return TraitApi { \u0026amp;F::speak }; } }; template call\u0026lt;X\u0026gt;: 查找 vtable 里的函数，然后调用。\n对于 vtable，静态分发是引用 constexpr static 变量，动态分发是通过指针引用。 collect: 在没有反射的情况下，帮助获取接口的类型和地址。由于是模板，所以也可以用于验证接口是否被正确实现。 TraitApi: 内部是一个简单 tuple，存储类型信息和地址。 接口实现 c++ 里常见的 Customization Points 有 重载，模板特化，Policy 以及 ADL。\n这里我们选择模板特化，rust 其实也是类似的实现。\n比如，Orphan Rule，即对 trait 的孤儿原则：\n为自己的类型实现外部 Trait 为外部类型实现自己的 Trait 在 c++ 的视角下，非常好理解，这两条规则都是为了让 Trait 的实现（即模板特化）对引用它的编译单元（即引用 .h 的 .cpp/.cc）一定可见。\n这样就能避免在不同的编译单元产生不同的实现。\nstruct Dog; template\u0026lt;\u0026gt; struct Impl\u0026lt;Speak, Dog\u0026gt; { static auto speak(TraitPtr self) -\u0026gt; std::string; }; struct Dog : Speak\u0026lt;Dog\u0026gt; { std::string voice {\u0026#34;Woof!\u0026#34;}; }; auto Impl\u0026lt;Speak, Dog\u0026gt;::speak(TraitPtr self) -\u0026gt; std::string { return self.as_ref\u0026lt;Dog\u0026gt;().voice; } ... Impl 接受一个 Trait 模板和具体类型。 : Speak\u0026lt;Dog\u0026gt; 非虚继承，来让 Dog 类拥有具体的接口函数，即 Dog().speak()。 Impl\u0026lt;Speak, Dog\u0026gt;::speak(Dog()) 直接调用实现。 这里把 Dog 的 fields 分开定义会好一些。\n这样可以在 Dog 还未定义的时候，直接操作 Dog fileds。\nstruct Dog; struct DogFields { std::string voice {\u0026#34;Woof!\u0026#34;}; }; // Impl Speak\u0026lt;Dog\u0026gt; ... struct Dog : DogFields, Speak\u0026lt;Dog\u0026gt; {} 静态分发 用 std::semiregular 来判断 Impl 是否有完整定义，当然也可以自己写模板判断 size。\ntemplate\u0026lt;typename A, template\u0026lt;typename\u0026gt; class... T\u0026gt; concept Implemented = (std::semiregular\u0026lt;Impl\u0026lt;T, A\u0026gt;\u0026gt; \u0026amp;\u0026amp; ...); // ... template\u0026lt;typename T\u0026gt; requires Implemented\u0026lt;T, Speak\u0026gt; void make_speak(T\u0026amp; animal) { std::print(\u0026#34;{}\u0026#34;, animal.speak()); } dyn 胖指针 即存储一个 vtable 指针和 self 指针。\n然后利用接口类的分发功能来实现调用。\ntemplate\u0026lt;template\u0026lt;typename\u0026gt; class Tr, ConstNess Cn\u0026gt; class Dyn : public Tr\u0026lt;DynImpl\u0026lt;Tr\u0026gt;\u0026gt; { using M = TraitMeta\u0026lt;Tr, DynImpl\u0026lt;Tr\u0026gt;\u0026gt;; friend M; using ptr_t = std::conditional_t\u0026lt;Cn == ConstNess::Const, const TraitPtr, TraitPtr\u0026gt;; const decltype(M::apis)* const apis; ptr_t self; ... } // ... Dog dog; auto dyn = make_dyn\u0026lt;Speak\u0026gt;(dog); std::print(\u0026#34;{}\u0026#34;, dyn.speak()); Tr: 一个 Trait 接口 Tr\u0026lt;DynImpl\u0026lt;Tr\u0026gt;\u0026gt;： 即用 DynImpl 标签标记给 Tr，生成具体的调用函数 apis: vtable 指针 Cn: Tr 无法拥有 const 标记，所以需要额外的参数来标记 ConstNess Box dyn TODO\n","permalink":"https://blog.bluempty.com/post/cpp-rust-trait/","summary":"\u003cp\u003e接触 \u003ccode\u003erust\u003c/code\u003e 倒是挺早了，看着它的生态慢慢好起来。\u003cbr\u003e\n第一次用上 \u003ccode\u003etrait\u003c/code\u003e 就在想，这么好的东西，该怎么在 \u003ccode\u003ec++\u003c/code\u003e 里用上呢。\u003cbr\u003e\n不过不算刚需，就一直搁置着，最近尝试简单实现了一下。\u003c/p\u003e","title":"C++ 模拟 Rust Trait"},{"content":"上个月刚好有新的越狱漏洞，于是趁着还没修复，把手里的 kpw5 越狱了。\n众所周知，Kindle 中国已经关门大吉了，虽然我现在是美亚账号，但是也不排除以后 Amazon 限制个人文档服务的可能。\n趁着闲下来的时间，了解了下 Kindle 越狱插件，看以后能不能自建同步服务。\nKUAL Kindle Unified Application Launcher\nsource\n就像它的名字说的，是用来启动应用的。\nextension 插件/模块 目录结构：\n└── extensions ├── ext_1 │ ├── config.xml │ ├── menu.json │ └── ... └── ext_2 ├── config.xml ├── menu.json └── ... 相关 README\nconfig.xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;extension\u0026gt; \u0026lt;information\u0026gt; \u0026lt;name\u0026gt;name\u0026lt;/name\u0026gt; \u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt; \u0026lt;author\u0026gt;author\u0026lt;/author\u0026gt; \u0026lt;id\u0026gt;id\u0026lt;/id\u0026gt; \u0026lt;/information\u0026gt; \u0026lt;menus\u0026gt; \u0026lt;menu type=\u0026#34;json\u0026#34;\u0026gt;menu.json\u0026lt;/menu\u0026gt; \u0026lt;/menus\u0026gt; \u0026lt;/extension\u0026gt; menu.json { \u0026#34;name\u0026#34;: \u0026#34;Application 1 menu\u0026#34; \u0026#34;items\u0026#34;: [ {\u0026#34;name\u0026#34;: \u0026#34;Application 1 menu, Item 1\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;act1.sh\u0026#34;}, { \u0026#34;name\u0026#34;: \u0026#34;Application 1 menu, Submenu 1\u0026#34;, \u0026#34;items\u0026#34;: [ {\u0026#34;name\u0026#34;: \u0026#34;Application 1 menu, Submenu 1, Item 1\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;act11.sh\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;Application 1 menu, Submenu 1, Item 2\u0026#34;, \u0026#34;action\u0026#34;: \u0026#34;act12.sh\u0026#34;} ] } ] } 越狱 2025 Kindle 越狱教程：不限 Kindle 型号，不限固件版本\nKindle Modding Wiki This is the Kindle Modding wiki, an online resource which hopes to consolidate all Kindle Modding knowledge into a centralised resource.\nKindle(kpw5) 系统环境 OS: Linux 4.9.77-lab126 armv7l CPU: MT8110 Bellatrix device GLIBC: 2.20 LD: /lib/ld-linux-armhf.so.3 [root@kindle root]# cat /etc/ld.so.conf /usr/java/lib /app/lib /usr/lib/lua [root@kindle root]# mount | grep tmpfs tmpfs on /dev type tmpfs (rw,relatime,mode=755) tmpfs on /dev/shm type tmpfs (rw,relatime) tmpfs on /var type tmpfs (rw,relatime,size=65536k) tmpfs on /mnt/kfxcache type tmpfs (rw,relatime,size=256000k) cgroup_root on /sys/fs/cgroup type tmpfs (rw,relatime) tmpfs on /chroot/dev type tmpfs (rw,relatime,mode=755) tmpfs on /chroot/var/cache type tmpfs (rw,relatime,size=65536k) tmpfs on /chroot/var/lock type tmpfs (rw,relatime,size=65536k) tmpfs on /chroot/var/run type tmpfs (rw,relatime,size=65536k) tmpfs on /chroot/tmp/session_token type tmpfs (rw,relatime,size=65536k) [root@kindle 4.9.77-lab126]# lsmod Module Size Used by g_mass_storage 2340 0 wmt_cdev_bt 17908 0 wlan_drv_gen4m 1792220 0 wmt_chrdev_wifi 11440 1 wlan_drv_gen4m wmt_drv 965568 4 wmt_cdev_bt,wlan_drv_gen4m,wmt_chrdev_wifi usb_f_mass_storage 32216 2 g_mass_storage libcomposite 32776 2 g_mass_storage,usb_f_mass_storage configfs 20880 3 usb_f_mass_storage,libcomposite pt_i2c 4448 0 pt 146584 2 pt_i2c opt3001 11908 1 falcon 31568 0 [permanent] hwtcon_v2 142808 3 [root@kindle root]# xwininfo -tree -root xwininfo: Window id: 0x51 (the root window) (has no name) ... children: \u0026#34;Webreader\u0026#34; \u0026#34;Pillowd\u0026#34; \u0026#34;KPPMainApp\u0026#34; \u0026#34;Mesquite\u0026#34; \u0026#34;Kfxreader\u0026#34; \u0026#34;Kb\u0026#34; \u0026#34;JunoStatusBarDriver\u0026#34; \u0026#34;L:A_N:application_ID:com.lab126.booklet.home_M:false_PC:TSB_RC:true_WT:true_ASR:true_O:U\u0026#34; \u0026#34;L:D_N:overlay_AKB:true_HIDET1:200_ID:system_A:QuickSettingsWindow_LB:ON_M:dismissible_CD:true_S:-1_KIWI:com.lab126.kppQuickSettings_SHOWT1:250\u0026#34;: (\u0026#34;KPPMainApp\u0026#34; \u0026#34;KPPMainApp\u0026#34;) \u0026#34;L:A_N:application_AKB:true_ASR:true_ID:com.lab126.krpp_A:mainWindow_WS:true_WT:true_PC:N_ALS:com.lab126.booklet.reader_O:UDLR_SHOWT1:70_S:-2\u0026#34;: (\u0026#34;KPPMainApp\u0026#34; \u0026#34;KPPMainApp\u0026#34;) \u0026#34;L:D_N:overlay_AKB:true_HIDET1:150_RKB:default_ID:system_A:kppFullScreenSearch_M:dismissible_PAIRID:JunoStatusBarWindow_S:-1_KIWI:com.lab126.KPPMainApp_SHOWT1:50\u0026#34;: (\u0026#34;KPPMainApp\u0026#34; \u0026#34;KPPMainApp\u0026#34;) \u0026#34;L:D_N:overlay_AKB:true_CD:true_FH:S_ID:com.lab126.kppContextMenu_A:ChromeContextMenu_LB:OFF_owner:com.lab126.KPPMainApp_M:dismissible_S:-1_SHOWT1:0_KIWI:com.lab126.KPPMainApp_HIDET1:80\u0026#34;: (\u0026#34;KPPMainApp\u0026#34; \u0026#34;KPPMainApp\u0026#34;) \u0026#34;L:SS_N:screenSaver_FH:F_module:screensaver_ID:blanket-screensaver_FS:F_O:U\u0026#34; \u0026#34;L:C_N:titleBar_PAIRID:JunoStatusBarWindow_KIWI:com.lab126.gtkstatusbar_HIDET1:50_ID:system_A:titleBar\u0026#34;: (\u0026#34;JunoStatusBarDriver\u0026#34; \u0026#34;JunoStatusBarDriver\u0026#34;) \u0026#34;L:A_N:application_AKB:true_ASR:true_ID:com.lab126.KPPMainApp_A:KPPMainApp_WS:true_WT:true_PC:T_O:UD_SHOWT1:200_S:-1\u0026#34;: (\u0026#34;KPPMainApp\u0026#34; \u0026#34;KPPMainApp\u0026#34;) \u0026#34;L:A_N:application_ID:com.lab126.booklet.reader_M:false_PC:N_RC:true_WT:true_ASR:true_O:URL_WTNB:true_WTPB:true_DM:N_S:-7\u0026#34; \u0026#34;L:A_N:application_module:blankwindow_ID:blankBackground_WS:true\u0026#34; \u0026#34;L:C_N:searchBar_A:kppTopChrome_KIWI:com.lab126.KPPMainApp_AKB:true_S:-1_SHOWT1:30_ID:system_HIDET1:50\u0026#34;: (\u0026#34;KPPMainApp\u0026#34; \u0026#34;KPPMainApp\u0026#34;) \u0026#34;L:KB_N:keyboard_DMINSETRIGHT:5_DM:KB_DMINSETLEFT:5_KBS:H_DMINSETTOP:84_LanH:567_PorH:567_DMINSETBOTTOM:5\u0026#34;: (\u0026#34;kb\u0026#34; \u0026#34;Kb\u0026#34;) \u0026#34;L:A_N:application_HIDE:background_S:1500_PC:TS_ID:com.lab126.store_O:U\u0026#34;: (\u0026#34;mesquite\u0026#34; \u0026#34;Mesquite\u0026#34;) \u0026#34;L:C_N:bottomBar_KIWI:com.lab126.KPPMainApp_AKB:true_S:-1_SHOWT1:50_ID:system_A:kppBottomChrome\u0026#34;: (\u0026#34;KPPMainApp\u0026#34; \u0026#34;KPPMainApp\u0026#34;) armv5 armv6 armv7 armhf 的区别 Kindle 在 5.16.3 固件版本后，切换到了 armhf(hard float)，这直接影响到了 c abi，包括 ld 也变成了 /lib/ld-linux-armhf.so.3，无法和原来的 armel 程序兼容。\n架构版本维度 armv5：经典 ARM9 处理器架构 armv6：ARM11 系列 armv7：Cortex-A 系列 armv8：64 位 ARM 架构 ABI 应用二进制接口维度 armel (ARM EABI)：使用软浮点（软件模拟浮点运算） armhf (ARM Hard Float)：使用硬浮点（直接调用 FPU 单元） 架构 主要 CPU 指令集 SIMD/NEON 浮点运算 典型设备 ARMv5 ARM9, ARM10 ARM, Thumb ❌ ❌（仅软件模拟） 旧款路由器、嵌入式系统 ARMv6 ARM11 ARM, Thumb-2 ❌ VFP（可选） 树莓派 1、早期智能手机 ARMv7 Cortex-A8/A9/A15 ARM, Thumb-2 ✅（NEON） ✅（VFPv3） 树莓派 2/3、智能手机 开发环境 最终的 Dockerfile 仓库\n珍爱生命，远离交叉编译。\n我选择用 qemu 来跑 arm 的容器，具体来说，是通过 binfmt 实现的。\n接下来就是选能用的发行版，对于这种非主流架构的 cpu，还得是 debian。\n然后就是能对上 glibc 版本的分支，要退到 Debian 8(jessie), released on 2015。jessie 的 glibc 版本是 2.19，满足 \u0026lt;=2.20 的要求。\n这里给一个 Dockerfile 的开头，需要安装 qemu-user-static-arm 和 qemu-user-static-binfmt, 并让 binfmt 在后台运行。\nFROM --platform=linux/arm/v7 debian:jessie RUN echo \u0026#34;\\n\\ deb [check-valid-until=no] http://archive.debian.org/debian jessie main\\n\\ deb [check-valid-until=no] http://archive.debian.org/debian-security jessie/updates main\\n\\ deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports main\\n\\ deb [check-valid-until=no] http://archive.debian.org/debian jessie-backports-sloppy main\\n\\ \u0026#34; \u0026gt; /etc/apt/sources.list ... 可以用 cat /proc/sys/fs/binfmt_misc/qemu-arm 来看 binfmt 是否正常工作，会有类似输出:\nenabled interpreter /usr/bin/qemu-arm-static flags: F offset 0 magic 7f454c4601010100000000000000000002002800 mask ffffffffffffff00fffffffffffffffffeffffff gcc jessie 仓库里最新的 gcc 版本是 4.9, 相当老。\n对于 c 项目，可能会在一些编译选项上报错。\n对于 c++ 的项目，4.x 勉强支持到 c++ 14 标准，要编译新点的项目，建议还是自行编译新版的 gcc。考虑到 libstdc++ 的兼容问题，这里不建议用太高的版本，比如 12/13..，可能会有坑。\ngo go 提供了 arm 通用的 binary 包，而且不用考虑 glibc 的兼容。\n参考官方的文档, 如果要指定 arm7l 目标，需要设置 GOARCH=arm 和 GOARM=7 两个环境变量。\nrust TODO\n我维护的插件 openssh server syncthing 下载\n","permalink":"https://blog.bluempty.com/post/kindle-module/","summary":"\u003cp\u003e上个月刚好有新的越狱漏洞，于是趁着还没修复，把手里的 kpw5 越狱了。\u003cbr\u003e\n众所周知，Kindle 中国已经关门大吉了，虽然我现在是美亚账号，但是也不排除以后 Amazon 限制个人文档服务的可能。\u003cbr\u003e\n趁着闲下来的时间，了解了下 Kindle 越狱插件，看以后能不能自建同步服务。\u003c/p\u003e","title":"Kindle 也有自己的 Magisk 模块"},{"content":"最近在看信号处理相关的书，看着看着，发现怎么看怎么像线性代数，于是记录下我能想到的对比。\n不得不说，这种可以把知识连成网的体验真不错，学起来事半功倍。\n博主不是相关方向的研究生，如果有书籍欢迎推荐给博主。\n这篇文章偏向一些有限维的直观理解，不打算引入更为抽象的无限维(主要是博主理解不能)。\n信号的向量表示 把某个离散信号 $x[n],\\ n \\in [1,m]$ 看为 $m$ 维的向量 $\\vec{v_x}$\n$$ \\vec{v_x} \\rightarrow (x[1], x[2], x[3], .., x[m]) $$单位脉冲和基向量 单位脉冲(unit impulse)\n$$ \\delta[n] = \\begin{cases} 0, \u0026 n \\ne 0 \\\\ 1, \u0026 n = 0 \\end{cases} $$ 基(basis)\nA basis of $V$ is a list of vectors in $V$ that is linearly independent and spans $V$ . For example, $$ (1, 0, . . . , 0), (0, 1, 0, . . . , 0), . . . , (0, . . . , 0, 1) $$线性系统与线性变换 线性系统(linear system)\n令 $y_1(t)$ 是一个连续时间系统对输入 $x_1(t)$ 的响应，而 $y_2(t)$ 是对应于输入 $x_2(t)$ 的输出，那么一个线性系统有:\n可加性(additivity)\n$$ y_1(t) + y_2(t)\\ 是对\\ x_1(t) + x_2(t)\\ 的响应 $$ 齐次性(homogeneity)\n$$ ay_1(t)\\ 是对\\ ax_1(t)\\ 的响应，此处 a 为任意复常数 $$ 线性变换(linear map)\nA linear map from $V$ to $W$ is a function $T : V → W$ with the following properties:\n可加性(additivity)\n$$ T (u + v) = T u + T v,\\ for\\ all\\ u, v ∈ V $$ 齐次性(homogeneity)\n$$ T (av) = a(T v),\\ for\\ all\\ a ∈ F\\ and\\ all\\ v ∈ V $$ 卷积和与矩阵乘法 卷积和(convolution sum) 对于信号$x[n]$，可以把其表示为由一个序列和一串位移单位脉冲的线性组合 $$ x[n] = \\sum_{k=-\\infty}^{+\\infty} x[k] \\delta[n-k] $$ $h_k[n]$ 对应位移单位脉冲 $\\delta[n-k]$ 的响应，$y[n]$ 对应 $x[n]$ 的响应，由于线性系统的性质，线性组合的叠加有 $$ y[n] = \\sum_{k=-\\infty}^{+\\infty} x[k]h_k[n] $$ 如果系统同时是时不变 (time invariant) 的，则有 $$ y[n] = \\sum_{k=-\\infty}^{+\\infty} x[k] h[n-k] $$$$ h_k[n] \\rightarrow h[n-k] $$矩阵乘法(matrix multiplication) $$ \\begin{bmatrix} a_{11} \u0026 a_{12} \u0026 \\cdots \u0026 a_{1n} \\\\ a_{21} \u0026 a_{22} \u0026 \\cdots \u0026 a_{2n} \\\\ \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ a_{m1} \u0026 a_{m2} \u0026 \\cdots \u0026 a_{mn} \\end{bmatrix} \\cdot \\begin{bmatrix} x_1 \\\\ x_2 \\\\ \\vdots \\\\ x_m \\end{bmatrix}= \\begin{bmatrix} a_{11}x_1 + a_{12}x_2 + \\cdots + a_{1m}x_m \\\\ a_{21}x_1 + a_{22}x_2 + \\cdots + a_{2m}x_m \\\\ \\vdots \\\\ a_{n1}x_1 + a_{n2}x_2 + \\cdots + a_{nm}x_m \\end{bmatrix} $$卷积和的矩阵表示 我们假设离散信号的范围是 $n \\in [1, m]$ ，且为时不变\n$$ \\vec{y[n]} = \\begin{bmatrix} x[1]h_1[1] + x[2]h_2[1] + \\cdots + x[m]h_m[1] \\\\ x[1]h_1[2] + x[2]h_2[2] + \\cdots + x[m]h_m[2] \\\\ \\vdots \\\\ x[1]h_1[m] + x[2]h_2[m] + \\cdots + x[m]h_m[m] \\\\ \\end{bmatrix} \\\\ \\\\ = \\begin{bmatrix} h_1[1] \u0026 h_2[1] \u0026 \\cdots \u0026 h_m[1] \\\\ h_1[2] \u0026 h_2[2] \u0026 \\cdots \u0026 h_m[2] \\\\ \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ h_1[m] \u0026 h_2[m] \u0026 \\cdots \u0026 h_m[m] \\\\ \\end{bmatrix} \\cdot \\begin{bmatrix} x[1] \\\\ x[2] \\\\ \\vdots \\\\ x[m] \\\\ \\end{bmatrix} \\\\ \\\\ = \\begin{bmatrix} h[0] \u0026 0 \u0026 0 \u0026 \\cdots \u0026 0 \\\\ h[1] \u0026 h[0] \u0026 0 \u0026 \\cdots \u0026 0 \\\\ h[2] \u0026 h[1] \u0026 h[0] \u0026 \\cdots \u0026 0 \\\\ \\vdots \u0026 \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ h[m-1] \u0026 h[m-2] \u0026 h[m-3] \u0026 \\cdots \u0026 h[0] \\\\ \\end{bmatrix} \\cdot \\vec{x[n]} $$ 这里的最后一步假设了 $h[-1] = 0$，这要求系统是因果的(causal)，$h[n-k] = 0\\ when\\ k \u0026gt; n$。\n同理，对 $\\vec{x[n]}$ 的单位脉冲的线性组合的公式可以表示为 $$ \\vec{x[n]} = \\begin{bmatrix} 1 \u0026 0 \u0026 \\cdots \u0026 0 \\\\ 0 \u0026 1 \u0026 \\cdots \u0026 0 \\\\ \\vdots \u0026 \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ 0 \u0026 0 \u0026 \\cdots \u0026 1 \\\\ \\end{bmatrix} \\cdot \\begin{bmatrix} x[1] \\\\ x[2] \\\\ \\vdots \\\\ x[m] \\\\ \\end{bmatrix} $$ 左边是位移单位脉冲 $\\delta[n-k]$ 组成的单位矩阵。\n特征函数与特征向量 特征函数(eigenfunction) 一个信号，若系统对该信号的输出响应仅一个常数乘以输入，则称该信号为系统的特征函数。\n同时幅度因子称为系统的特征值。\n特征向量(eigenvectors) A scalar $λ ∈ F$ is called an eigenvalue of $T ∈ L(V)$ if there exists a nonzero vector $u ∈ V$ such that $Tu = λu$.\nSuppose $T ∈ L(V)$ and $λ ∈ F$ is an eigenvalue of $T$ . A vector $u ∈ V$ is called an eigenvector of $T$ (corresponding to $λ$) if $Tu = λu$.\n复指数信号为特征函数的向量表示 信号分析中最重要的基础，一个线性时不变系统对复指数信号的响应也同样是一个复指数信号。\n即复指数是线性时不变系统的特征函数。\n这个结论只在无限维的情况下成立，向量化的解释更偏向泛函，属于博主的知识盲区\nTODO ","permalink":"https://blog.bluempty.com/post/signal-and-vector/","summary":"\u003cp\u003e最近在看信号处理相关的书，看着看着，发现怎么看怎么像线性代数，于是记录下我能想到的对比。\u003cbr\u003e\n不得不说，这种可以把知识连成网的体验真不错，学起来事半功倍。\u003c/p\u003e","title":"信号与向量"},{"content":"长久以来，我时不时就能感觉到自己心里压着某块石头。在一帆风顺的时候，我感觉不到，在陷入困难时，它能督促我朝着某个方向走。但是在某一天，我推翻了一些长久以来的观念，同时社会向我传达的也不再是希望，这块石头开始折磨起我来。偶尔和朋友的谈心，发现了一些问题，于是有了这篇文章。\n希望这篇文章能帮到在前进的道路上疲惫倒下，又或者在接受一些现实后感到无力的你。\n我们是什么时候开始埋头前进的 从某个时间点开始，我发现自己开始挺难沉浸在游戏里，脑子里时刻有个声音提醒自己不能把时间浪费在游戏上。对此，我心里一直有疑问，是什么时候开始，我不再能自在的玩耍了呢？可能有人会想到这不是挺好的事情吗，能自发的这么自律，才能在工作和学习中脱颖而出。是啊，这确实给我带来了一些优势，我能通过一些试卷的筛选去到一些“xx班”。但这已经是过去式了，对于现在的我，这个习惯更像是，一个诅咒，一条枷锁。\n“知识改变命运，细节决定成败，习惯成就人生\u0026quot;，这是一条常见的标语，写在一间寻常的初中教室里，也刻在我的内心的某块地方。细细想来，我的许多思考方式都来自这条标语，我依稀还能记得会全班一起放声朗读，以及那时我的一些思考的碎片。从此开始，慢慢地，课间变成了写题的延续，争取成绩成为一种执念，甚至一种着魔。\n那时对高考还没什么概念，但是会有几个选择，\u0026ldquo;xx学校xx班\u0026rdquo;、“xx学校”、“yy学校”、“职业高中”。当时有接近三分之一的人去了职高，在大部分人都认为去了职高大概等于人生完蛋了的氛围下。我去了高中，当然是高兴的，但是不会想到人生完蛋了的氛围会一直持续到工作。\n一些闲书有写，话语里常常会潜藏一些价值观假设。\n”人生得成功才行“，是这句标语潜藏的。\n否定与前进 “这个社会还是需要一些扫大街的人。”\n“你难道愿意像你父母一样一辈子待在那个小地方吗？”\n“我们已经只能这样了，这个家以后得靠你”\n我们总是依靠否定来前进。\n否定着从事简单体力劳动的人，努力让自己不会变成那样。否定着不挣钱的行业，去往能挣热钱的地方。否定着普通的平凡的生活，得去往人生巅峰才行。否定着否定着，我们的道路变成了一条独木桥，好似前方是康庄大道，但是大家都是从桥上掉下去的人。\n这些否定来源于我们生活的方方面面。无论是和朋友，老师，父母还是亲戚，一切向钱看，没钱也得要能来事，会攀关系。升官发财，高人一等，光宗耀祖，是我们的底色。没钱没地位，那就是任何人都可以来唾弃的对象，哪怕你干着公益，好人是用来嘲笑的。回头来看，我认为这来源于人们缺少足够安全的感受，于是赢下一切成了我们潜意识的目标。而这种不安，源于社会，俗话说接受社会的毒打，我们慢慢体会到自己是输不起的人。\n”读书改变命运“，这句话隐含着一些判断，不读书的我们的命运是悲惨的，改变的前提是否定我们现在的生活，读书才是改变的最好方式。所以我们把目光和希望寄托在读书上，悬梁刺股，拥簇着追逐着去改掉现在”不好“的自己，去“改变”自己的命运，追寻那微小的可能。内卷产生了，一分就是成千上万人，读书的沉默成本越发增高，投入的越多，退路也就越窄。而当我们不得不去接受被我们否定了十几年的生活时，我们是崩溃的。\n我们的身后不知不觉变成了逐渐崩塌的深渊，慢慢地停不下来了。\n读书的时候，我常常要问自己：\n如何考到更高的分数？ 今天是否认真学习了？ 是否还不够努力？ 我的智商是不是就只能到这里了？ 这种审视没有尽头，可能会延续到我的棺材板里。\n前进的尽头在哪里 “最近的新闻，现在上海和北京的公务员要看本科文凭，要 985 211 才行。”\n“别看现在你们都在一起上课，等你们大学毕业以后，十年以后，差距就出来了\u0026hellip;”\n“我之前教的一名学生，没考好，现在在县城开水果摊卖水果。”\n“当官不吃亏，以后有机会就当官。”\n“xx现在在大厂工作，年薪百万，一个人养猫住大平层。”\n常年活在这种标准中，我现在挺心疼自己的。\n我也算有过一些理想，高中有放过一些大国工匠一类的纪录片，想着以后成为顶尖的科学家，工程师的白日梦。但是没有考上 985 又让我自己掐灭了这些念头，虽然后来了解到大部分的科研和一线工程不是那么美好的工作。\n我还记得高中时，有写过一个小本本，里面记着零零散散以后要尝试的事物，要完成的目标，要去的地方，要结识的人\u0026hellip;\n这些事情大多一拖再拖，因为我还有“主线任务”没有完成，甚至是“主线前置任务”也没有完成，而这些任务对每个人还是一样的，改都不带改的，甚至年龄也卡的死死的，于是我只能踏上了一条又一条独木桥。\n买房与责任 我们能轻易背负二三十年的负债，做一笔这么大的投资，在普遍没有金融背景知识的情况下，无他，只是大家都这么干而已。\n而这也是大多数人无法跨过的主线任务，居高不下的房价成了另一条独木桥，大家每天和生活对线只为能得到一些能在本地买房的可能。\n我原本以为掏空六个钱包是一种夸张的说法，直到身边的具体的实例告诉我这不是空穴来风。\n我们买房，买的不仅仅是一套单纯的水泥盒子，更多是其捆绑的一系列东西。比如结婚的筹码，子女的学校，户口，家庭的责任，以及市民这个身份。房价在另一个角度是一种隐形的税收，如果这一套玩不转，只会转移成另一种形式，比如收租。\n但是，就现在来说，这个担子有些太重了，对一个被驱赶着前进的人来说，我扛不动。\n身份与安全 在当下，我们缺少社会身份带来的安全感。\n以我有限的社会观察，作为个体的我们，难以独立地维护我们自己的某些权益。常见的是，想方设法把事情闹大，引起更为广泛的关注，然后才能开始解决问题。无论是身边的自己的小事，还是周围类似人的一起的事，还是关乎一类群体的大事，都是如此。\n公信力的丧失。我们想看到的是为群众着想，但实际的情况确是上面有相关政策，有补贴，于是做好面子工程，但是对于没有政策的情况，那是一点机会都没有。大部分体制工作人员并不会抱着对群众负责的想法，多一事不如少一事，事不关己高高挂起，一切向上，向政策负责。如果没法完成指标，反而会没事找事，做类似钓鱼执法的行为，本末倒置。由此，我们还能明白，许多一直遗留的社会问题，大多是没有政策支持的苦差事，如果这事还牵扯到地方政府自己的收益来源，那基本没有解决的可能，而且最后的风险会下放给没钱也没有身份的普通人。\n没有人会关注你的个人，为你站台。我们需要一些特殊的社会身份才能拿到一些额外的社会保障，比如常见的医师公。我身边也有许多相关人士的退休工资能达到接近一万，在一个小县城里。私企普遍加班的时候，挺多政府相关岗位能在下午五点下班。如果去银行做个人贷款，没有足够多的流水的情况下，基本只会放款给公务员。这三类职业也刚好占据着教育，医疗和政府相关的社会资源，我们大多数的花销也都在这些上面。\n缺少相对的公平。被插队的感觉并不好受，会让人感到焦躁。而这种插队现象在我们生活中普遍存在。这其实和国内玩家普遍喜欢玩游戏开挂很像，开挂带来的爽和安全感是无可比拟的，但这是破坏环境的行为，以挂制挂是最后的选择。这也是破坏其他玩家游戏体验的行为，而在生活里的开挂，破坏的，是人心理的安全和幸福感，让人处在焦躁之中。\n有这么一类叙事，站在国家的角度，指出发展是需要牺牲一部分人的，这是必要的没法避免的。但是，在已经发展成世界第二大经济体的我们的国家，能考虑给被牺牲的人们一些补偿吗。\n回到生活本身 为了对抗这些不安，我能选择什么。\n放下太过困难的责任。比如我的主线任务之一，买房。卸下担子，让自己能够松一口气，来看看自己身边还剩下些什么。\n寻找自己的内部支撑。去尝试更多的事物，自己喜欢的事物，虽然不能挣钱但是能够给予我自我满足的的事物。\n寻找自己的外部支撑。建立和他人的联系，有能一起谈心的，有能一起玩的，有一些共同爱好的圈子\u0026hellip;。并不是传统意义上的攀关系，而是更为简单和轻松的关系，不要觉得没法交换价值的朋友没有意义，这只是一种附带品，我们需要的更多是一些共同的记忆，相互的肯定和倾听的对象。\n回到生活本身。从一些简单的劳动里收获及时的快乐，而不是以月为单位去备战未来。重新捡起生活里的获得感，能够更为惬意的去度过自己的时间。建立自己的仪式感，收获足够多的回忆，以此来填充自己。\n我们的信念 \u0026ldquo;世上只有一种英雄主义，就是在认清生活真相之后依然热爱生活。\u0026rdquo;\n我一直特别羡慕一类人，那些每天充满活力和朝气的爱笑的人。而这也是我现在向往的样子，填满空洞无力的自己，而后能去辐射他人。\n","permalink":"https://blog.bluempty.com/post/finding-serenity/","summary":"\u003cp\u003e长久以来，我时不时就能感觉到自己心里压着某块石头。在一帆风顺的时候，我感觉不到，在陷入困难时，它能督促我朝着某个方向走。但是在某一天，我推翻了一些长久以来的观念，同时社会向我传达的也不再是希望，这块石头开始折磨起我来。偶尔和朋友的谈心，发现了一些问题，于是有了这篇文章。\u003c/p\u003e","title":"寻找名为安心的小岛"},{"content":"日常经常需要使用容器，时常想要 docker 更轻量一些，比如不需要 daemon，不需要 root，普通用户就可以使用上。\n然后被安利了 podman，使用了挺长时间了，以下是我的安利~\ndaemonless 如题，podman 不需要跑一个 daemon 来管理容器。\n具体实现的话，大概是底层的 oci runtime 会在 XDG_RUNTIME_DIR 给每个容器一个独立的文件夹来存放一些状态信息，可以被 podman cli 读取和管理。\nsocket podman 仍然提供了通过 socket 来管理的功能，这个 socket 需要单独跑一个 daemon，不过非常轻，类似提供 podman cli 的功能同时带有验证。\nsystemctl --user status podman.socket\nsystemctl --user enable --now podman.socket\nrootless 与其把“权力”关进笼子里，不如一开始就分离需要“权力”的部分。\n普通用户使用 podman 默认就是 rootless。\n配置文件: ~/.config/containers\n容器存储: ~/.local/share/containers\nstorage driver overlay(default)\n需要安装 fuse-overlayfs btrfs\n推荐在 fstab 添加 user_subvol_rm_allowed 挂载选项，来源。 zfs\u0026hellip; pasta User-Mode Networking slirp4netns 的替代，拥有更好的性能，是现在 podman 5.x 默认的网络实现(rootless)\npasta (same binary as passt, different command) offers equivalent functionality, for network namespaces: traffic is forwarded using a tap interface inside the namespace, without the need to create further interfaces on the host, hence not requiring any capabilities or privileges.\nStarting with Linux 3.8, unprivileged users can create network_namespaces(7) along with user_namespaces(7). However, unprivileged network namespaces had not been very useful, because creating veth(4) pairs across the host and network namespaces still requires the root privileges. (i.e. No internet connection)\nslirp4netns allows connecting a network namespace to the Internet in a completely unprivileged way, by connecting a TAP device in a network namespace to the usermode TCP/IP stack (\u0026ldquo;slirp\u0026rdquo;).\nhost.containers.internal 通过 /etc/hosts 设置，在使用 pasta 的情况下是指向 169.254.1.2 的特殊地址，指向本机，通常用于访问其他容器暴露的端口或者 host 的服务。\n但是无法访问监听 localhost 回环地址的服务，需要监听 0.0.0.0。\n性能测试 TODO\nUID 映射 默认 --userns=host\nKey Host User Container User auto $UID nil (Host User UID is not mapped into container.) host $UID 0 (Default User account mapped to root user in container.) keep-id $UID $UID (Map user account to same UID within container.) keep-id:uid=200,gid=210 $UID 200:210 (Map user account to specified UID, GID value within container.) nomap $UID nil (Host User UID is not mapped into container.) 具体来说，对于 rootless container：\n$ cat /etc/subuid \u0026lt;login name\u0026gt;:100000:65536 Container UID Host UID 0 1000 1 100000 2 100001 \u0026hellip; \u0026hellip; 1000 100999 pod podman 是支持 pod 的，不过没有 k8s 的许多企业化功能。\n共享网络子空间 共享硬件资源 共享资源限制 kube podman 支持用 Kubernetes YAML 来定义 pod。\n同时有自己的 metadata 和 volume 写法，具体可以阅读文档。\n博主个人是习惯把需要多个容器的服务用 pod 来写。\n支持的 Kubernetes kinds\nPod Deployment PersistentVolumeClaim ConfigMap Secret DaemonSet 这里给一个 yaml example:\napiVersion: v1 kind: Pod metadata: ... spec: containers: - name: container image: foobar ... systemd unit systemd units using Podman Quadlet\nQuadlet 现在是 systemd generator。\n这是我最看重的功能，通过 systemd 来管理 podman container。\n扫描的位置：\nroot: /etc/containers/systemd/\nuser: $XDG_CONFIG_HOME/containers/systemd/\n.container [Unit] Description=A minimal container [Container] # Use the centos image Image=quay.io/centos/centos:latest # Use volume and network defined below Volume=test.volume:/data # In the container we just run sleep Exec=sleep 60 [Service] # Restart service when sleep finishes Restart=always # Extend Timeout to allow time to pull the image TimeoutStartSec=900 [Install] # Start by default on boot WantedBy=multi-user.target default.target .kube 配合上文的 kube pod yaml\n[Unit] Description=A kubernetes yaml based service Before=local-fs.target [Kube] Yaml=%h/kube/test.yaml [Install] # Start by default on boot WantedBy=multi-user.target default.target auto-update 自动拉去新的 contianer image，然后重启 container，是一个 system service + timer。\n需要容器开启 AutoUpdate(.container)/io.containers.autoupdate(.kube metadata) 选项\nsystemctl --user enable podman-auto-update.timer\npodman auto-update\ndistrobox Use any Linux distribution inside your terminal. Enable both backward and forward compatibility with software and freedom to use whatever distribution you’re more comfortable with.\nRun any distribution as you need~\n","permalink":"https://blog.bluempty.com/post/podman-systemd/","summary":"\u003cp\u003e日常经常需要使用容器，时常想要 docker 更轻量一些，比如不需要 daemon，不需要 root，普通用户就可以使用上。\u003cbr\u003e\n然后被安利了 podman，使用了挺长时间了，以下是我的安利~\u003c/p\u003e","title":"podman 使用体验"},{"content":"给小米 13 解锁刷了 EU 版本并给了 KernelSU LKM，但是 momo 一直检测到 magisk 模块。\nDebug 了一下下。\nKernelSU 卸载模块实现 kernel 内部使用 path_umount 单独给某个 app 卸载模块 overlay 挂载点\n# https://github.com/tiann/KernelSU/blob/v1.0.2/kernel/core_hook.c#L451 static void ksu_umount_mnt(struct path *path, int flags) { int err = path_umount(path, flags); if (err) { pr_info(\u0026#34;umount %s failed: %d\\n\u0026#34;, path-\u0026gt;dentry-\u0026gt;d_iname, err); } } static void try_umount(const char *mnt, bool check_mnt, int flags) { struct path path; int err = kern_path(mnt, 0, \u0026amp;path); ... ksu_umount_mnt(\u0026amp;path, flags); } int ksu_handle_setuid(struct cred *new, const struct cred *old) { ... try_umount(\u0026#34;/system\u0026#34;, true, 0); try_umount(\u0026#34;/vendor\u0026#34;, true, 0); try_umount(\u0026#34;/product\u0026#34;, true, 0); try_umount(\u0026#34;/data/adb/modules\u0026#34;, false, MNT_DETACH); ... } HyperOS 会使用 overlay 挂载 mi_ext mi_ext 分区是小米用来添加一些额外 app 和 配置文件的\neu 版本这个分区除了 etc，其他都是空文件夹\n# cn 固件的 mi_ext 分区 $ tree . ├── etc │ ├── build.prop │ ├── init │ │ └── init.miui.mi_ext.rc │ └── NOTICE.xml.gz ├── product │ ├── app │ ├── bin │ ├── data-app │ ├── etc │ │ ├── permissions │ │ │ ├── hyperos.sdk2.xml │ │ │ ├── privapp-permissions-product-miext.xml │ │ │ └── system_launcher_private_permission.xml │ │ ├── precust_theme │ │ ├── preferred-apps │ │ ├── security │ │ └── sysconfig │ ├── framework │ │ └── hyperos.sdk2.jar │ ├── lib │ ├── lib64 │ ├── media │ ├── opcust │ ├── overlay │ │ ├── GmsMiCSPTelecommOverlay.apk │ │ ├── GmsMiCSPTelephonyOverlay.apk │ │ └── MiuiStkResOverlay.apk │ ├── priv-app │ └── usr ├── system │ ├── app │ ├── etc │ │ ├── permissions │ │ │ └── privapp-permissions-system-miext.xml │ │ └── sysconfig │ ├── framework │ └── priv-app └── system_ext └── etc └── permissions fstab:\nfuxi:/ $ cat /vendor/etc/fstab.qcom mi_ext /mnt/vendor/mi_ext erofs ro wait,slotselect,logical,first_stage_mount,nofail mi_ext /mnt/vendor/mi_ext ext4 ro,barrier=1,discard wait,slotselect,logical,first_stage_mount,nofail /mnt/vendor/mi_ext /mi_ext erofs ro,bind wait,nofail overlay /product/overlay overlay ro,lowerdir=/mnt/vendor/mi_ext/product/overlay/:/product/overlay check,nofail overlay /product/app overlay ro,lowerdir=/mnt/vendor/mi_ext/product/app/:/product/app check,nofail .... 挂载混在一起 大致挂载顺序：\nfstab 中的 overlay KSU 的 overlay init 额外的 overlay /mi_ext/etc/init/init.miui.mi_ext.rc\n启动时额外的 overlay 挂载\non boot mount overlay overlay product/usr lowerdir=/mnt/vendor/mi_ext/product/usr:/product/usr mount overlay overlay product/etc/precust_theme lowerdir=/mnt/vendor/mi_ext/product/etc/precust_theme:product/etc/precust_theme 某个 commit 会恢复一些原厂的挂载\n不确定是不是有影响\n解决 原本想的是直接修改 fstab 了事，但是发现 android 10 新加了 super 动态分区，把 system/vender/... 分段在一个分区里，类似套娃。\n而且这些分区基本都是 erofs(readonly fs)，想单独改某个分区还挺麻烦的。\n看了下 KernelSU Module guide，发现刚好有在 fs 完成后的脚本执行点（post-fs-data.sh）。\n那可以全局 umount，来回退 fstab 的挂载(eu 版本，这些挂载没有用处)\n以下是脚本：模块下载\n#!/system/bin/sh MODDIR=${0%/*} BINDDIR=/tmp/mi_ext mkdir -p $BINDDIR # log exec 2\u0026gt;$BINDDIR/debug.log set -x PATHES=\u0026#34; /product/overlay /product/app /product/priv-app /product/lib /product/framework /product/media /product/opcust /product/data-app /product/etc/sysconfig /product/etc/permissions /system/app /system/priv-app /system/framework /system/etc/sysconfig /system/etc/permissions /product/usr /product/etc/precust_theme /product/etc/preferred-apps /product/etc/security \u0026#34; umount -lvf -t overlay /product/bin umount -lvf -t overlay /product/lib64 for p in $PATHES; do umount -v -t overlay $p done mount --bind -o ro $BINDDIR /mnt/vendor/mi_ext/system mount --bind -o ro $BINDDIR /mi_ext/system mount --bind -o ro $BINDDIR /mnt/vendor/mi_ext/product mount --bind -o ro $BINDDIR /mi_ext/product mount --bind -o ro $BINDDIR /mnt/vendor/mi_ext/vendor mount --bind -o ro $BINDDIR /mi_ext/vendor Changelog 1.1\nremove /vendor/etc/camera and/vendor/lib/rfsa/adsp which are used by camera and not part of mi_ext.\nadd update.json ","permalink":"https://blog.bluempty.com/post/xiaomi-eu-kernel-su-mount/","summary":"\u003cp\u003e给小米 13 解锁刷了 EU 版本并给了 KernelSU LKM，但是 momo 一直检测到 magisk 模块。\u003c/p\u003e\n\u003cp\u003eDebug 了一下下。\u003c/p\u003e\n\u003ch3 id=\"kernelsu-卸载模块实现\"\u003eKernelSU 卸载模块实现\u003c/h3\u003e\n\u003cp\u003ekernel 内部使用 \u003ca href=\"https://elixir.bootlin.com/linux/v5.15.31/C/ident/path_umount\"\u003epath_umount\u003c/a\u003e 单独给某个 app 卸载模块 overlay 挂载点\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"cp\"\u003e# https:\u003c/span\u003e\u003cspan class=\"c1\"\u003e//github.com/tiann/KernelSU/blob/v1.0.2/kernel/core_hook.c#L451\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003eksu_umount_mnt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003epath_umount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\t\u003cspan class=\"nf\"\u003epr_info\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;umount %s failed: %d\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003edentry\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ed_iname\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etry_umount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003emnt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003echeck_mnt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e \u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eerr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nf\"\u003ekern_path\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emnt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003eksu_umount_mnt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003epath\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eflags\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003eksu_handle_setuid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecred\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"n\"\u003ecred\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eold\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003etry_umount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/system\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003etry_umount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/vendor\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003etry_umount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/product\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"nf\"\u003etry_umount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;/data/adb/modules\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eMNT_DETACH\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\t\u003cspan class=\"p\"\u003e...\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"hyperos-会使用-overlay-挂载-mi_ext\"\u003eHyperOS 会使用 overlay 挂载 mi_ext\u003c/h3\u003e\n\u003cp\u003e\u003ccode\u003emi_ext\u003c/code\u003e 分区是小米用来添加一些额外 app 和 配置文件的\u003cbr\u003e\n\u003ccode\u003eeu\u003c/code\u003e 版本这个分区除了 \u003ccode\u003eetc\u003c/code\u003e，其他都是空文件夹\u003c/p\u003e","title":"HyperOS.eu KernelSU 卸载模块不工作"},{"content":"博主有一台 Pixel 5\n尝试用 Lineageos 作为主力机后放弃，以下是面临的一些问题\n无法人脸认证 https://x.com/abaabaMoGu/status/1759564528424284524?lang=ar\nhttps://www.v2ex.com/t/1068160\n推测是 lineageos 被列入了黑名单\n铁路 12306\n钉钉 美团\n请求异常拒绝操作 政府/银行类 app 闪退 https://v2ex.com/t/1041752\nAndroid 14 qpr2 的修改，导致国内大部分上了梆梆企业加固的 app 崩溃\n个税所得税 交管12123 银行\u0026hellip; ","permalink":"https://blog.bluempty.com/post/lineageos-china/","summary":"\u003cp\u003e博主有一台 Pixel 5\u003cbr\u003e\n尝试用 Lineageos 作为主力机后放弃，以下是面临的一些问题\u003c/p\u003e\n\u003ch2 id=\"无法人脸认证\"\u003e无法人脸认证\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://x.com/abaabaMoGu/status/1759564528424284524?lang=ar\"\u003ehttps://x.com/abaabaMoGu/status/1759564528424284524?lang=ar\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.v2ex.com/t/1068160\"\u003ehttps://www.v2ex.com/t/1068160\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e推测是 lineageos 被列入了黑名单\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e铁路 12306\u003cbr\u003e\n\u003ca href=\"https://pan.bluempty.com/d/Public/Blog/lineageos-china/12306.webp?width=60\" data-dimbox data-dimbox-caption=\"12306\"\u003e\n\u003cimg alt=\"12306\" height=\"%\" loading=\"lazy\" src=\"https://pan.bluempty.com/d/Public/Blog/lineageos-china/12306.webp?width=60\" width=\"60%\"\u003e\n\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e钉钉\u003c/li\u003e\n\u003cli\u003e美团\u003cbr\u003e\n请求异常拒绝操作\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"政府银行类-app-闪退\"\u003e政府/银行类 app 闪退\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://v2ex.com/t/1041752\"\u003ehttps://v2ex.com/t/1041752\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eAndroid 14 qpr2 的\u003ca href=\"https://github.com/crdroidandroid/android_art/commit/f6d02cf544f1bdb8cb0ae90603fbcc2b9f5b3c47\"\u003e修改\u003c/a\u003e，导致国内大部分上了梆梆企业加固的 app 崩溃\u003c/p\u003e","title":"国内使用 Lineageos 的问题"},{"content":"想着需要给自己买张显卡了，原本打算等着核显继续迭代，但感觉还是太慢了。\n我的要求不太高，能 1080p 60fps 全高画质玩大部分游戏，能跑一些 ai 应用就更好了。\n原本打算 4060 的，但是显存有点小了，最近刚好 Intel 发了 B580，然后就决定是它了。\n对 Intel 印象还是不错，虽然最近发展不太行，不过那也不影响，现有的相关设施已经够用了。\n同时也一直打算试试 oneapi，我还挺看好 SYCL 的，就是不知道何时才能进 upstream llvm。\n抱着还需要废心思折腾的预期，结果拿到就能直接在 Linux 桌面下用了。\n基本配置 Specifications Xe-cores 20 Graphics Clock 2670 MHz Memory 12 GB GDDR6 Graphics Memory Interface 192 bit Graphics Memory Bandwidth 456 GB/s GPU Peak TOPS (Int8) 233 TBP 190 W 系统环境 kernal: 6.12.11\nmesa: 24.3.4\nos: fedora 41\negpu: m2 to oculink\nPCIe Gen 1x1 lspci 对于 Intel Arc 显卡总是显示 PCIe 1x1 的速度\n这似乎是预期行为，并不是实际的速度，Troubleshooting， Intel Support Forums\n具体的连接速度可以用 xpumanager 来测试\nResizable BAR Intel 说明 Arc 显卡需要开启 Resizable BAR 才能完全发挥性能\n查了下资料，Base Address Register 用于把 pcie 设备的资源映射到系统内存地址，内部有一套同步逻辑\n台式主板一般有直接的选项开启\n笔记本和mini主机需要把分配给核显的内存开到 4G 以上\n$ sudo lspci -s 03:00.0 -vv | grep -i bar Capabilities: [420 v1] Physical Resizable BAR BAR 2: current size: 16GB, supported: 256MB 512MB 1GB 2GB 4GB 8GB 16GB AI 应用 llama.cpp 支持 SYCL 和 Vulkan 后端，我写好了 Dockerfile.\nSYCL 版本需要安装 intel oneapi，然后在构建时挂载进容器\nllama-bench -ngl 99 结果(统计参考)：\nSYCL\nmodel size params backend ngl test t/s llama 7B Q4_0 3.56 GiB 6.74 B SYCL 99 pp512 1982.69 ± 4.02 llama 7B Q4_0 3.56 GiB 6.74 B SYCL 99 tg128 34.83 ± 0.11 Vulkan\nggml_vulkan: 0 = Intel(R) Graphics (BMG G21) (Intel open-source Mesa driver) | uma: 0 | fp16: 1 | warp size: 32 | matrix cores: none model size params backend ngl test t/s llama 7B Q4_0 3.56 GiB 6.74 B Vulkan 99 pp512 175.56 ± 2.65 llama 7B Q4_0 3.56 GiB 6.74 B Vulkan 99 tg128 44.12 ± 0.09 ollama ollama 官方没有给 SYCL 支持说明，但是它的后端是 llama.cpp, 改改就能运行了。\n配合 open-webui，能建立知识库和联网搜索，还挺不错。\nDockerfile\nOLLAMA_GPU_OVERHEAD\n保留的不使用的显存(bytes)，一开始我还以为是最多能使用的显存，发现 ollama 怎么不使用 gpu，才发现是搞反了\n不知道出于什么原因，linux 这边没有有效手段获取 ARC GPU 可用的 vram，为了避免 oom，这个必须配置\nollama ps\n可以看到每个模型的运行情况\nTODO\n游戏 mc 平均FPS: 280\nmc 1.21.4 1080p Iris + Sodium(默认配置) BSL shader 8.4 High 赛博朋克 2077 需要 24.3.4 及以上的 mesa，不然会有 shader 渲染错误\n光追似乎不工作\n1080p 最高画质\n平均FPS: 68\n最低FPS: 56\n最高FPS: 82\n极限竞速地平线 4 博主 4 还没玩完，并没有买 5\n1080p 超高\n平均FPS：136\n最低FPS: 119\n最高FPS: 166\n媒体 需要 24.4.4 及以上的 intel media-driver\nmedia features 文档，b580 是 BMG\nMedia Stack 单纯编解码，大部分程序都是直接走 libva 的接口，只需要安装 media-driver 就可以了\noneVPL 是结合 GPGPU 和 VAAPI 来做 Video Processing\nMeisaSdk 是旧显卡用的，在被 oneVPL 逐渐替代\n解码 2160p 120fps hevc main10 mmd: 5路\nav1 main 和 hevc rext 422 也是5路\n2160p(21:9) 120fps hevc main mmd: 4路\n编码 原视频为上面测试解码的两个视频\n分辨率 帧率 编码 格式 编码配置 编码速率 2160p(21:9) 120 hevc p010 main10,QVBR,qp:12 1.04x 2160p 120 hevc p010 main10,QVBR,qp:12 1.37x 2160p 120 hevc y210(422) rext,QVBR,qp:12 1.32x 2160p 120 av1 p010 main,VBR,crf:24 1.37x 2160p(21:9) 60 hevc p010 main10,QVBR,qp:12 2.06x 2160p 60 hevc p010 main10,QVBR,qp:12 1.81x 2160p 60 av1 p010 main,VBR,crf:24 1.81x ffmpeg -hwaccel vaapi -hwaccel_output_format vaapi -i input.mp4 -vf \u0026#39;scale_vaapi=format=p010\u0026#39; -c:v hevc_vaapi -profile:v main10 -tier high -rc_mode QVBR -qp 12 -b:v 40M output3.mp4 性能测试 GravityMark 统计网站\nVulkan 1920x1080 Asteroids: 200000 Score: 24896 Opengl 1920x1080 Asteroids: 200000 Score: 20477 clpeak 统计网站\nSingle-precision compute 和 4060 差不多\nHalf-precision compute 网站没有数据，看下面 vkpeak, 和 4070 super 差不多\nInteger compute 差不多 4060 的一半\n$ ./clpeak Platform: Intel(R) OpenCL Graphics Device: Intel(R) Graphics [0xe20b] Driver version : 24.35.30872.32 (Linux x64) Compute units : 160 Clock frequency : 2850 MHz Global memory bandwidth (GBPS) float : 417.71 float2 : 429.27 float4 : 434.78 float8 : 446.30 float16 : 449.03 Single-precision compute (GFLOPS) float : 14083.21 float2 : 14401.35 float4 : 14096.05 float8 : 12096.30 float16 : 13596.31 Half-precision compute (GFLOPS) half : 24831.84 half2 : 28076.27 half4 : 28199.86 half8 : 27916.44 half16 : 27768.14 Double-precision compute (GFLOPS) double : 891.12 double2 : 893.37 double4 : 898.90 double8 : 888.26 double16 : 842.54 Integer compute (GIOPS) int : 4433.77 int2 : 4461.17 int4 : 4456.32 int8 : 4364.93 int16 : 4192.12 Integer compute Fast 24bit (GIOPS) int : 4473.72 int2 : 4448.66 int4 : 4470.87 int8 : 4379.65 int16 : 4225.50 Integer char (8bit) compute (GIOPS) char : 21487.19 char2 : 26128.29 char4 : 25867.58 char8 : 25227.17 char16 : 24600.19 Integer short (16bit) compute (GIOPS) short : 20924.35 short2 : 26189.49 short4 : 25835.04 short8 : 25127.30 short16 : 23874.53 Transfer bandwidth (GBPS) enqueueWriteBuffer : 6.77 enqueueReadBuffer : 6.71 enqueueWriteBuffer non-blocking : 7.08 enqueueReadBuffer non-blocking : 7.01 enqueueMapBuffer(for read) : 6.97 memcpy from mapped ptr : 26.67 enqueueUnmap(after write) : 7.20 memcpy to mapped ptr : 26.41 Kernel launch latency : 49.15 us vkpeak 统计网站\nfp32 和 4060 差不多\nint32 特别差\n其他的居然能跑到和 4070 super 差不多\n$ ./vkpeak 0 device = Intel(R) Graphics (BMG G21) fp32-scalar = 7277.51 GFLOPS fp32-vec4 = 10706.95 GFLOPS fp16-scalar = 21068.69 GFLOPS fp16-vec4 = 23754.69 GFLOPS fp16-matrix = 0.00 GFLOPS fp64-scalar = 799.67 GFLOPS fp64-vec4 = 779.47 GFLOPS int32-scalar = 3024.92 GIOPS int32-vec4 = 3102.06 GIOPS int16-scalar = 10801.67 GIOPS int16-vec4 = 13525.01 GIOPS VkFFT 统计网站\nsingle precision $ ./VkFFT_TestSuite -vkfft 0 0 - VkFFT FFT + iFFT C2C benchmark 1D batched in single precision VkFFT System: 3 8x16777216 Buffer: 1024 MB avg_time_per_step: 10.984 ms std_error: 0.054 num_iter: 3 benchmark: 95462 bandwidth: 364.2 VkFFT System: 4 16x8388608 Buffer: 1024 MB avg_time_per_step: 11.302 ms std_error: 0.378 num_iter: 3 benchmark: 92774 bandwidth: 353.9 VkFFT System: 5 32x4194304 Buffer: 1024 MB avg_time_per_step: 11.164 ms std_error: 0.332 num_iter: 3 benchmark: 93921 bandwidth: 358.3 VkFFT System: 6 64x2097152 Buffer: 1024 MB avg_time_per_step: 10.819 ms std_error: 0.024 num_iter: 3 benchmark: 96918 bandwidth: 369.7 VkFFT System: 7 128x1048576 Buffer: 1024 MB avg_time_per_step: 10.816 ms std_error: 0.022 num_iter: 3 benchmark: 96946 bandwidth: 369.8 VkFFT System: 8 256x524288 Buffer: 1024 MB avg_time_per_step: 10.918 ms std_error: 0.016 num_iter: 3 benchmark: 96037 bandwidth: 366.4 VkFFT System: 9 512x262144 Buffer: 1024 MB avg_time_per_step: 10.963 ms std_error: 0.045 num_iter: 3 benchmark: 95645 bandwidth: 364.9 VkFFT System: 10 1024x131072 Buffer: 1024 MB avg_time_per_step: 10.990 ms std_error: 0.052 num_iter: 3 benchmark: 95414 bandwidth: 364.0 VkFFT System: 11 2048x65536 Buffer: 1024 MB avg_time_per_step: 11.018 ms std_error: 0.067 num_iter: 3 benchmark: 95172 bandwidth: 363.1 VkFFT System: 12 4096x32768 Buffer: 1024 MB avg_time_per_step: 10.981 ms std_error: 0.080 num_iter: 3 benchmark: 95486 bandwidth: 364.3 VkFFT System: 13 8192x16384 Buffer: 1024 MB avg_time_per_step: 11.638 ms std_error: 1.004 num_iter: 3 benchmark: 90095 bandwidth: 343.7 half precision $ ./VkFFT_TestSuite -vkfft 2 2 - VkFFT FFT + iFFT C2C benchmark 1D batched in half precision VkFFT System: 3 8x16777216 Buffer: 512 MB avg_time_per_step: 5.755 ms std_error: 0.054 num_iter: 2 benchmark: 182207 bandwidth: 347.5 VkFFT System: 4 16x8388608 Buffer: 512 MB avg_time_per_step: 5.855 ms std_error: 0.018 num_iter: 2 benchmark: 179090 bandwidth: 341.6 VkFFT System: 5 32x4194304 Buffer: 512 MB avg_time_per_step: 6.394 ms std_error: 0.066 num_iter: 2 benchmark: 163989 bandwidth: 312.8 VkFFT System: 6 64x2097152 Buffer: 512 MB avg_time_per_step: 6.731 ms std_error: 0.127 num_iter: 2 benchmark: 155790 bandwidth: 297.1 VkFFT System: 7 128x1048576 Buffer: 512 MB avg_time_per_step: 7.127 ms std_error: 0.059 num_iter: 2 benchmark: 147137 bandwidth: 280.6 VkFFT System: 8 256x524288 Buffer: 512 MB avg_time_per_step: 5.517 ms std_error: 0.100 num_iter: 2 benchmark: 190062 bandwidth: 362.5 VkFFT System: 9 512x262144 Buffer: 512 MB avg_time_per_step: 5.403 ms std_error: 0.004 num_iter: 2 benchmark: 194084 bandwidth: 370.2 VkFFT System: 10 1024x131072 Buffer: 512 MB avg_time_per_step: 5.575 ms std_error: 0.168 num_iter: 2 benchmark: 188085 bandwidth: 358.7 VkFFT System: 11 2048x65536 Buffer: 512 MB avg_time_per_step: 5.560 ms std_error: 0.126 num_iter: 2 benchmark: 188598 bandwidth: 359.7 VkFFT System: 12 4096x32768 Buffer: 512 MB avg_time_per_step: 5.590 ms std_error: 0.108 num_iter: 2 benchmark: 187580 bandwidth: 357.8 VkFFT System: 13 8192x16384 Buffer: 512 MB avg_time_per_step: 10.461 ms std_error: 1.182 num_iter: 2 benchmark: 100241 bandwidth: 191.2 ","permalink":"https://blog.bluempty.com/post/b580/","summary":"\u003cp\u003e想着需要给自己买张显卡了，原本打算等着核显继续迭代，但感觉还是太慢了。\u003cbr\u003e\n我的要求不太高，能 1080p 60fps 全高画质玩大部分游戏，能跑一些 ai 应用就更好了。\u003c/p\u003e\n\u003cp\u003e原本打算 4060 的，但是显存有点小了，最近刚好 Intel 发了 B580，然后就决定是它了。\u003cbr\u003e\n对 Intel 印象还是不错，虽然最近发展不太行，不过那也不影响，现有的相关设施已经够用了。\u003cbr\u003e\n同时也一直打算试试 oneapi，我还挺看好 SYCL 的，就是不知道何时才能进 upstream llvm。\u003c/p\u003e","title":"Intel B580 显卡 Linux 使用体验"},{"content":" 阅读本篇文章需要有所了解：Linux 发行版, Linux 桌面环境(Desktop Envrionment), 包管理(Package Manager)\n博主第一次接触 Linux 是在高中，当时似乎是有个软件只有 Linux 版本，然后就参照着网上的文章试着安装 arch，具体的细节已经不太记得了。 对当时的我来说，一堆不明所以的命令挺头疼的，一直害怕把电脑搞坏。\n大学有段时间是双系统，日常使用中，Linux 系统特别容易“坏掉”，坏掉的原因千奇百怪。分层来看， 硬件兼容/内核/驱动/系统库/依赖/桌面环境等等都可能有bug， 这些组件还有点貌合神离，出问题是常有的事情，偶尔解决一两个问题是会有成就感，但是多了就单纯感到麻烦。\n有个具体的例子，我看到的时候想笑又感同深受，Linus Tech 为了安装 steam 而卸载掉了桌面环境。\n在 2020 年， 偶然接触了 flatpak，不一会就把日常软件都 all in flatpak 了，而后也陆续维护了几个自己想使用的软件到 flathub。日常体验来说，我再也不用去担心哪天更新后软件没法使用了，不用自己手动管理软件的更新，不再担心不安分的闭源软件，不再担心系统更新会破坏我的主力软件。\n在用上 flatpak 以后，我决定把 Linux Desktop 作为自己的主力系统。\nFlatpak 解决了什么问题 首先，最重要的，和系统解耦。具体解决的就是上文 Linus Tech 的遇到的问题。其实类似东西挺早就在服务器上有了，就是容器，也就是 docker 那一套。接触过 Linux 发行版的朋友对包管理应该特别熟悉，同时还有依赖，仓库，源码，软件包，FHS等等概念，不过我们这里不讨论这套系统具体怎么工作。\n我们来看看 Linus Tech 是如何不小心损坏了桌面环境。安装命令 sudo apt-get install steam， 而后是一大片输出，其中有一段警告 WARNING: The following essential packages will be removed， 而这里面包含了 pop-desktop，最后桌面环境就被这么卸载掉了。部分人会指出这是 Linus Tech 不熟悉的原因，或者是安装引导和关键包规避没有处理好，是包管理的问题，又或者是用 Linux 做桌面系统就是傻逼活该。\n抛开现象看关键，一是安装用户软件需要sudo。有个挺好的类比，就是 Win 系统下的 UAC，经常使用 Win 系统的朋友一定听过重装系统这个词吧，那为什么你需要时不时重装系统呢，一个比较大的因素就是日常使用的大部分软件它们都请求 UAC 来安装或者运行。用车来比喻，一台原本挺好的车，为了某些功能，被送去了改装店，改装店的人当然能实现这个功能，但是这也不妨碍他们在车上装些额外的东西或者替换关键的零件，改装的次数多了，车慢慢就废掉了。\n二是 apt-get 同时管理了用户软件和系统组件。以我的观念，依赖管理是一个复杂的系统问题，软件包之间杂乱的依赖关系，关系网中的每个节点时常会更新自身，不难得出，这里面的不确定性是随着包的增多而接近指数递增的。这也有个例子，偶尔看使用 npm 的开发者吐槽 node_modules，特别有意思。\n这里我明确区分了用户软件和系统组件。系统组件，数量少，变化慢且稳定，多是被依赖，这些特点完美契合包管理。而用户软件，数量庞且杂，变化快同时随时可能死掉，依赖大量的库，这完全踩在包管理的雷区。当我们尝试把这两种类型的包融合在一起的时候，系统组件被某个用户软件“炸掉”就是意料之中的事情。\n其次，就是引入了沙箱。这点解决的问题不用多说，近些年 Microsoft 和 Google 都在收紧各自系统用户软件的权限。国内的用户也在慢慢注意隐私和安全相关的概念。\n然后就是统一。众所周知，Linux 发行版是相当碎片化的，比 Android 还要碎的多。博主就从 arch 换到 debian 换到 opensuse 换回 debian 最后固定在 fedora，还有数不清的小众中的小众发行版，同时这些发行版还有类似 Android 的版本碎片化。然后同时还要算上桌面环境的碎片化，gnome/kde/cosmic/xfce/lxqt/...。这些碎片化带来了相当糟糕(操蛋)的用户体验，也劝退了许多开发者。\n最后站在开发者的角度，一直有两个矛盾的点。\n一是和用户间系统环境不相同，这是碎片化的问题，不过导致 Linux 用户名声变臭了，比如常见的说法，用户数量最少，但是提出的问题是最多的。\n二是和发行版间的，核心的矛盾在于发行版和开发者间对于依赖的版本有不同的要求。发行版需要某个组件保持最新版本或者不更新大版本，只更新安全更新。开发者就一点，用和开发环境一样的依赖版本。\nFlatpak 是怎么解决的 运行时 运行时囊括了大部分公用基础库，比如 glibc，libstdc++，libcurl，xorg套件，wayland套件等等。 版本号 23.08/24.08，每年一次大更新，来引入 breaking change，而平常的维护会确保 abi 兼容。 不在运行时里的库，由软件自行 bundle，同名库优先加载 bundle 版本。类似 Win/Android 的做法 。 运行时分为 Platform 和 SDK，简单来说，Platform 由 SDK 删减而来，主要删减头文件，静态库，编译工具链等等。 基本情况说明了，部分人会疑惑，为什么不直接使用 host 的库呢，这样更节省空间。\n和系统解耦，不依赖也不假设 host 系统的库，这样就算是老掉牙的 debian oldstable，也能用上最新的库和软件。这也极大的解决了发行版碎片化的问题。\n对开发者来说，确定的运行环境，可以决定依赖库版本的自由，可以更多把精力放到开发软件上。\nbubblewrap 隔离 借由 Linux namespaces 来实现的非特权沙盒，具体可以阅读项目主页。\n它保证了，在指定有限的权限下，让 flatpak 应用和 host 环境隔离开。\nPortal(xdp) 隔离了 host 环境以后，我们需要一套经过验证的 IPC 接口，用来管理一些敏感的 host 资源。\n具体可以参考 Android permisson，不过 android 是基于 binder，而 xdp 基于 dbus。\n比较有意思的是，xdp 变相统一了 Linux desktop 混乱的桌面环境接口，qt/gtk/electron/... 现在都已经适配了 xdp。\nFlatpak 是包管理吗 回到本文标题，Flatpak 是包管理工具吗？我认为不是。\n我们对包管理的定义一般是限定在 Linux 发行版里的满足某些功能的软件，flatpak 和这些软件有许多相似之处，但是做法却完全不同。同时，最重要的，flatpak 没有办法替代传统的包管理，它更多是一个补充，让包管理回到“管理系统软件包”的职能上。flatpak 包的颗粒度非常粗，依赖关系也异常浅，无法去构建/操作发行版里的细小组件，比如 freedesktop sdk 自己就不是通过 flatpak 而是 BuildStream 来构建。\n不过这其实是个开放问题，读者可以自己斟酌。\n不如看看其他地方，比如 Android 的软件包安装程序是包管理吗?\nFlatpak Tips和技术细节 运行时 /app 我们进入运行时里去具体看看\n$ flatpak run --command=bash org.freedesktop.Sdk//24.08 [📦 org.freedesktop.Sdk ~]$ ls / app bin dev etc lib lib64 proc run sbin sys tmp usr var [📦 org.freedesktop.Sdk ~]$ cat /etc/ld.so.conf include /run/flatpak/ld.so.conf.d/app-*.conf include /app/etc/ld.so.conf /app/lib include /run/flatpak/ld.so.conf.d/runtime-*.conf [📦 org.freedesktop.Sdk ~]$ ldd /usr/bin/ls linux-vdso.so.1 (0x00007f4737637000) libselinux.so.1 =\u0026gt; /usr/lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f47375bd000) libc.so.6 =\u0026gt; /usr/lib/x86_64-linux-gnu/libc.so.6 (0x00007f47373be000) libpcre2-8.so.0 =\u0026gt; /usr/lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f473731d000) /lib64/ld-linux-x86-64.so.2 (0x00007f4737639000) [📦 org.freedesktop.Sdk ~]$ echo $PATH /app/bin:/usr/bin 可以发现这其实就等效于一个遵循 FHS 的最小化发行版。\n/app\n作为每个软件的 Prefix，编译打包中，只有这个目录是可写的。 /app/lib\n软件放置 Bundle library 的地方 /app/bin\n默认在容器的 PATH 环境变量里，需要把软件的启动程序安装/链接到这里 host share [📦 org.freedesktop.Sdk ~]$ echo $XDG_DATA_DIRS /app/share:/usr/share:/usr/share/runtime/share:/run/host/user-share:/run/host/share [📦 org.freedesktop.Sdk ~]$ cat /etc/fonts/conf.d/50-flatpak.conf \u0026lt;?xml version=\u0026#34;1.0\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE fontconfig SYSTEM \u0026#34;fonts.dtd\u0026#34;\u0026gt; \u0026lt;fontconfig\u0026gt; \u0026lt;!-- This has to be first so it is written while building the runtime --\u0026gt; \u0026lt;cachedir\u0026gt;/usr/cache/fontconfig\u0026lt;/cachedir\u0026gt; \u0026lt;dir\u0026gt;/app/share/fonts\u0026lt;/dir\u0026gt; \u0026lt;!-- Then this so it is written when building the app --\u0026gt; \u0026lt;cachedir\u0026gt;/app/cache/fontconfig\u0026lt;/cachedir\u0026gt; \u0026lt;include ignore_missing=\u0026#34;yes\u0026#34;\u0026gt;/app/etc/fonts/local.conf\u0026lt;/include\u0026gt; \u0026lt;dir\u0026gt;/run/host/fonts\u0026lt;/dir\u0026gt; \u0026lt;dir\u0026gt;/run/host/local-fonts\u0026lt;/dir\u0026gt; \u0026lt;dir\u0026gt;/run/host/user-fonts\u0026lt;/dir\u0026gt; \u0026lt;!-- This is duplicated from the general config because we want to write there before the /run dirs, in case they are ever writable, like e.g with old versions of flatpak. --\u0026gt; \u0026lt;cachedir prefix=\u0026#34;xdg\u0026#34;\u0026gt;fontconfig\u0026lt;/cachedir\u0026gt; \u0026lt;cachedir\u0026gt;/run/host/fonts-cache\u0026lt;/cachedir\u0026gt; \u0026lt;cachedir\u0026gt;/run/host/user-fonts-cache\u0026lt;/cachedir\u0026gt; \u0026lt;include\u0026gt;/run/host/font-dirs.xml\u0026lt;/include\u0026gt; \u0026lt;/fontconfig\u0026gt; /run/host/share/icons 对应 /usr/share/icons\n/run/host/user-share/icons\n对应 ${XDG_DATA_HOME}/icons\n/run/host/fonts\n对应 /usr/share/fonts\n/run/host/user-fonts\n对应 ${XDG_DATA_HOME}/fonts\n全局权限 flatpak 可以给所有应用预制统一的权限。\n这一点还挺好用的，比如我有一个文件夹，不能让任何应用看到，哪怕有 host 权限。\n$ flatpak override --user --filesystem=\u0026#39;xdg-config/fontconfig:ro\u0026#39; $ cat ~/.local/share/flatpak/overrides/global [Context] filesystems=xdg-config/gtk-3.0:ro;!xdg-run/keyring;/nix:ro;xdg-config/fontconfig:ro; [Session Bus Policy] com.canonical.AppMenu.Registrar=talk [Environment] MOZ_ENABLE_WAYLAND=1 优先级 应用自己的权限配置是第一优先，而后是全局的。\n不过 filesystem 权限不太一样，它自身就有优先级，比如 host/home 比一般的路径优先级要低。大致是先满足了 filesystem 自己的优先级再来论其他的。\nsystem-wide and per-user 类似 Win 的把应用 安装到所有用户 和 只为我安装。\n注意这两边是完全独立开来的，都用的话，需要两份 runtime\n我是推荐用 per-user，如果是家里共享的电脑，推荐 system-wide\nsystem-wide 安装位置：/var/lib/flatpak/\n需要权限来执行命令，发行版基本都有安装 polkit rule，当然你也可以用 sudo\nper-user 安装位置：$HOME/.local/share/flatpak/\n需要使用 --user flag ，加在命令后面\n","permalink":"https://blog.bluempty.com/post/is-flatpak-package-manager/","summary":"\u003cblockquote\u003e\n\u003cp\u003e阅读本篇文章需要有所了解：\u003ccode\u003eLinux 发行版\u003c/code\u003e, \u003ccode\u003eLinux 桌面环境(Desktop Envrionment)\u003c/code\u003e, \u003ccode\u003e包管理(Package Manager)\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e博主第一次接触 Linux 是在高中，当时似乎是有个软件只有 Linux 版本，然后就参照着网上的文章试着安装 arch，具体的细节已经不太记得了。\n对当时的我来说，一堆不明所以的命令挺头疼的，一直害怕把电脑搞坏。\u003c/p\u003e","title":"Flatpak 是包管理吗"}]